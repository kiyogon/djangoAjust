以下の要件を満たす、シンプルで初心者にもわかりやすいDjangoアプリケーション（小規模アプリのサンプル）を作りたいです。
重要な制約事項:
- テンプレート内でカスタムフィルターを絶対に使用しないこと。
- テンプレート内でのロジック処理を最小限に抑え、可能な限りビュー内で処理を行うこと。
カスタムフィルターの代わりに:
- ビュー内でデータを整形し、テンプレートに渡すこと。
- 複雑なデータ処理はすべてビュー内で行い、テンプレートはシンプルな表示のみを担当すること。
1. 環境:
   * Python 3.11
   * PostgreSQL 16.3
   * Docker環境（Docker ComposeとDockerfileはすでに設定済み）
2. プロジェクト構成:
   * プロジェクト名: ajust_pj
   * アプリ名: ajust_app
3. 目的：
- 複数ユーザの飲み会の調整をかんたんに行いたい
4. 機能：
- 新規イベント作成
- イベントに対する候補日をカレンダーから追加（5個まで）
- 参加者による候補日への回答（◯/✕/△）
- 各候補日の参加可否状況の表示
5. ユースケース：
- イベント主催者が新しいイベントを作成し、候補日を設定する（URL発行）
- イベント主催者が参加者にURLを伝える（システム外）
- 参加者がURLにアクセスし、イベントの候補日に対する参加可否を入力する
- 主催者/参加者がイベントへの参加状況を一覧で確認する
6. 画面一覧
- トップページ（候補日入力、イベント作成、URL発行）
- イベント詳細ページ（イベント参加可否入力、イベント状況一覧確認）
7. docker-compose.ymlのDB関連の一部
services:
db:
image: public.ecr.aws/docker/library/postgres:16.3
volumes:
- postgres_data:/var/lib/postgresql/data/
environment:
- POSTGRES_DB=dbs
- POSTGRES_USER=user
- POSTGRES_PASSWORD=password
7.  以上の要件を満たすDjangoアプリケーションのコードを、各ファイル（models.py, views.py, forms.py, urls.py, テンプレートファイル）ごとに作成してください。
ライブラリのインストールから、プロジェクトの作成、アプリケーションの起動までステップバイステップでコマンドを教えて下さい。
8. コード提出前の確認事項:
- テンプレート内にカスタムフィルターが使用されていないか。
- テンプレート内の複雑なロジックがビューに移動されているか。
- テンプレートがシンプルな表示ロジックのみになっているか。


